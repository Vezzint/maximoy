import os
import logging
import sqlite3
import datetime
import random
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MaximoyDatabase:
    def __init__(self):
        self.db_path = "/tmp/maximoy.db"
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS habits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                description TEXT,
                category TEXT,
                difficulty TEXT,
                streak INTEGER DEFAULT 0,
                best_streak INTEGER DEFAULT 0,
                created_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS habit_progress (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                habit_id INTEGER,
                date TEXT,
                completed INTEGER DEFAULT 0,
                notes TEXT,
                FOREIGN KEY (habit_id) REFERENCES habits (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                title TEXT,
                description TEXT,
                priority TEXT,
                due_date TEXT,
                completed INTEGER DEFAULT 0,
                created_date TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ—Ç–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS notes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                title TEXT,
                content TEXT,
                category TEXT,
                created_date TEXT,
                updated_date TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Maximoy Database initialized")

    def add_habit(self, user_id, name, description="", category="general", difficulty="medium"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO habits (user_id, name, description, category, difficulty, created_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, name, description, category, difficulty, datetime.datetime.now().isoformat()))
        
        habit_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ Habit added: {name} for user {user_id}")
        return habit_id

    def get_user_habits(self, user_id, active_only=True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if active_only:
            cursor.execute('''
                SELECT * FROM habits 
                WHERE user_id = ? AND is_active = 1 
                ORDER BY streak DESC, created_date DESC
            ''', (user_id,))
        else:
            cursor.execute('''
                SELECT * FROM habits 
                WHERE user_id = ? 
                ORDER BY streak DESC, created_date DESC
            ''', (user_id,))
        
        habits = cursor.fetchall()
        conn.close()
        return habits

    def mark_habit_done(self, habit_id, notes=""):
        """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT id FROM habit_progress 
            WHERE habit_id = ? AND date = ?
        ''', (habit_id, today))
        
        existing = cursor.fetchone()
        
        if existing:
            cursor.execute('''
                UPDATE habit_progress SET completed = 1, notes = ?
                WHERE id = ?
            ''', (notes, existing[0]))
        else:
            cursor.execute('''
                INSERT INTO habit_progress (habit_id, date, completed, notes)
                VALUES (?, ?, 1, ?)
            ''', (habit_id, today, notes))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º streak
        cursor.execute('''
            UPDATE habits SET streak = streak + 1,
            best_streak = CASE WHEN streak + 1 > best_streak THEN streak + 1 ELSE best_streak END
            WHERE id = ?
        ''', (habit_id,))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ Habit {habit_id} marked as done")

    def add_task(self, user_id, title, description="", priority="medium", due_date=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO tasks (user_id, title, description, priority, due_date, created_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, title, description, priority, due_date, datetime.datetime.now().isoformat()))
        
        task_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return task_id

    def get_user_tasks(self, user_id, completed=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT * FROM tasks 
            WHERE user_id = ? AND completed = ?
            ORDER BY 
                CASE priority 
                    WHEN 'high' THEN 1 
                    WHEN 'medium' THEN 2 
                    WHEN 'low' THEN 3 
                END,
                created_date DESC
        ''', (user_id, 1 if completed else 0))
        
        tasks = cursor.fetchall()
        conn.close()
        return tasks

    def mark_task_completed(self, task_id):
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            UPDATE tasks SET completed = 1 WHERE id = ?
        ''', (task_id,))
        
        conn.commit()
        conn.close()

    def add_note(self, user_id, title, content, category="general"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        now = datetime.datetime.now().isoformat()
        cursor.execute('''
            INSERT INTO notes (user_id, title, content, category, created_date, updated_date)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, title, content, category, now, now))
        
        note_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return note_id

    def get_user_notes(self, user_id, category=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if category:
            cursor.execute('''
                SELECT * FROM notes 
                WHERE user_id = ? AND category = ?
                ORDER BY updated_date DESC
            ''', (user_id, category))
        else:
            cursor.execute('''
                SELECT * FROM notes 
                WHERE user_id = ?
                ORDER BY updated_date DESC
            ''', (user_id,))
        
        notes = cursor.fetchall()
        conn.close()
        return notes

class MaximoyBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.db = MaximoyDatabase()
        self.motivational_quotes = [
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üö∂‚Äç‚ôÇÔ∏è",
            "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üí™",
            "–°–µ–≥–æ–¥–Ω—è - –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üåà",
            "–ü–æ–º–Ω–∏: –¥–∞–∂–µ —Å–∞–º—ã–µ –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞! üéØ",
            "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å! üìà",
            "–¢—ã –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏, —á–µ–º –±—ã–ª –≤—á–µ—Ä–∞! üéâ",
            "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è! ‚è∞"
        ]
        logger.info("ü§ñ Maximoy Bot initialized")

    def start(self, update: Update, context: CallbackContext):
        user = update.effective_user
        welcome_text = f"""
üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maximoy, {user.first_name}!**

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏!

üìä **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**

üéØ **–ü—Ä–∏–≤—ã—á–∫–∏**
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ç—Ä–∏–∫–∏
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

‚úÖ **–ó–∞–¥–∞—á–∏** 
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

üìù **–ó–∞–º–µ—Ç–∫–∏**
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ü–æ–∏—Å–∫ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

üìà **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

üöÄ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add_habit - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
/add_task - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É  
/add_note - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/dashboard - –û–±–∑–æ—Ä –¥–Ω—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

**Maximoy –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!** ‚ú®
        """
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="quick_add_habit")],
            [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="quick_add_task")],
            [InlineKeyboardButton("üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="quick_note")],
            [InlineKeyboardButton("üìä –î–∞—à–±–æ—Ä–¥", callback_data="dashboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    def dashboard(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        habits = self.db.get_user_habits(user_id)
        tasks = self.db.get_user_tasks(user_id, completed=False)
        
        text = f"üìä **–î–∞—à–±–æ—Ä–¥ Maximoy** ‚Ä¢ {today}\n\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        completed_today = 0
        total_habits = len(habits)
        
        for habit in habits:
            habit_id = habit[0]
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
            conn = sqlite3.connect(self.db.db_path)
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM habit_progress 
                WHERE habit_id = ? AND date = ? AND completed = 1
            ''', (habit_id, today))
            if cursor.fetchone()[0] > 0:
                completed_today += 1
            conn.close()
        
        habit_percentage = (completed_today / total_habits * 100) if total_habits > 0 else 0
        
        text += f"üéØ **–ü—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è:** {completed_today}/{total_habits}\n"
        text += f"{self._create_progress_bar(habit_percentage)} {habit_percentage:.0f}%\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        high_priority = sum(1 for task in tasks if task[4] == 'high')
        medium_priority = sum(1 for task in tasks if task[4] == 'medium')
        low_priority = sum(1 for task in tasks if task[4] == 'low')
        
        text += f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:** {len(tasks)}\n"
        text += f"   üî¥ –í—ã—Å–æ–∫–∏–π: {high_priority} | üü° –°—Ä–µ–¥–Ω–∏–π: {medium_priority} | üü¢ –ù–∏–∑–∫–∏–π: {low_priority}\n\n"
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        quote = random.choice(self.motivational_quotes)
        text += f"üí´ *{quote}*"
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏", callback_data="mark_habits")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="show_tasks")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ", callback_data="quick_add")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    def add_habit(self, update: Update, context: CallbackContext):
        if not context.args:
            update.message.reply_text(
                "üéØ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
                "–§–æ—Ä–º–∞—Ç: /add_habit <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> | <—Å–ª–æ–∂–Ω–æ—Å—Ç—å>\n\n"
                "**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –∑–¥–æ—Ä–æ–≤—å–µ, —É—á–µ–±–∞, —Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ\n"
                "**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** –ª–µ–≥–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, —Å–ª–æ–∂–Ω–∞—è\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/add_habit –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞`\n"
                "‚Ä¢ `/add_habit –ß—Ç–µ–Ω–∏–µ | –ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç | —É—á–µ–±–∞ | —Å—Ä–µ–¥–Ω—è—è`\n"
                "‚Ä¢ `/add_habit –ú–µ–¥–∏—Ç–∞—Ü–∏—è | 10 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º | –∑–¥–æ—Ä–æ–≤—å–µ | –ª–µ–≥–∫–∞—è`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        parts = text.split("|")
        
        name = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
        category = parts[2].strip() if len(parts) > 2 else "general"
        difficulty = parts[3].strip() if len(parts) > 3 else "medium"
        
        habit_id = self.db.add_habit(update.effective_user.id, name, description, category, difficulty)
        
        update.message.reply_text(
            f"‚úÖ **–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n"
            f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {difficulty}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üéØ",
            parse_mode='Markdown'
        )

    def add_task(self, update: Update, context: CallbackContext):
        if not context.args:
            update.message.reply_text(
                "‚úÖ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏**\n\n"
                "–§–æ—Ä–º–∞—Ç: /add_task <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç> | <—Å—Ä–æ–∫>\n\n"
                "**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π\n"
                "**–°—Ä–æ–∫:** –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞'\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/add_task –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é`\n"
                "‚Ä¢ `/add_task –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã | –ú–æ–ª–æ–∫–æ, —Ö–ª–µ–± | –≤—ã—Å–æ–∫–∏–π | —Å–µ–≥–æ–¥–Ω—è`\n"
                "‚Ä¢ `/add_task –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É | 50 —Å—Ç—Ä–∞–Ω–∏—Ü | —Å—Ä–µ–¥–Ω–∏–π | 2024-12-31`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        parts = text.split("|")
        
        title = parts[0].strip()
        description = parts[1].strip() if len(parts) > 1 else ""
        priority = parts[2].strip() if len(parts) > 2 else "medium"
        due_date = parts[3].strip() if len(parts) > 3 else None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
        if due_date == '—Å–µ–≥–æ–¥–Ω—è':
            due_date = datetime.datetime.now().strftime("%Y-%m-%d")
        elif due_date == '–∑–∞–≤—Ç—Ä–∞':
            due_date = (datetime.datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        
        task_id = self.db.add_task(update.effective_user.id, title, description, priority, due_date)
        
        update.message.reply_text(
            f"‚úÖ **–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {title}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {priority}\n"
            f"**–°—Ä–æ–∫:** {due_date if due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Å—Ä–æ–∫! ‚è∞",
            parse_mode='Markdown'
        )

    def add_note(self, update: Update, context: CallbackContext):
        if not context.args:
            update.message.reply_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏**\n\n"
                "–§–æ—Ä–º–∞—Ç: /add_note <–∑–∞–≥–æ–ª–æ–≤–æ–∫> | <—Ç–µ–∫—Å—Ç> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n\n"
                "**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:** –∏–¥–µ–∏, –º—ã—Å–ª–∏, –∑–∞–¥–∞—á–∏, —Å—Å—ã–ª–∫–∏, –ª–∏—á–Ω–æ–µ\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/add_note –ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ | –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤`\n"
                "‚Ä¢ `/add_note –ú—ã—Å–ª–∏ | –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ø–æ—Ä—Ç–∞ | –∑–¥–æ—Ä–æ–≤—å–µ`\n"
                "‚Ä¢ `/add_note –°—Å—ã–ª–∫–∞ | https://example.com | —Å—Å—ã–ª–∫–∏`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        parts = text.split("|")
        
        title = parts[0].strip()
        content = parts[1].strip() if len(parts) > 1 else ""
        category = parts[2].strip() if len(parts) > 2 else "general"
        
        note_id = self.db.add_note(update.effective_user.id, title, content, category)
        
        update.message.reply_text(
            f"üìù **–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!**\n\n"
            f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {title}\n"
            f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n"
            f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** {content if content else '–ü—É—Å—Ç–æ'}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞ ‚Ññ{note_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üíæ",
            parse_mode='Markdown'
        )

    def stats(self, update: Update, context: CallbackContext):
        user_id = update.effective_user.id
        
        habits = self.db.get_user_habits(user_id)
        tasks = self.db.get_user_tasks(user_id)
        notes = self.db.get_user_notes(user_id)
        
        text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Maximoy**\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        if habits:
            total_streak = sum(habit[6] for habit in habits)
            best_streak = max((habit[7] for habit in habits), default=0)
            
            text += "üéØ **–ü—Ä–∏–≤—ã—á–∫–∏:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {len(habits)}\n"
            text += f"‚Ä¢ –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {total_streak} –¥–Ω–µ–π\n"
            text += f"‚Ä¢ –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: {best_streak} –¥–Ω–µ–π\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        if tasks:
            completed_tasks = sum(1 for task in tasks if task[6])
            total_tasks = len(tasks)
            
            text += "‚úÖ **–ó–∞–¥–∞—á–∏:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
            text += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {(completed_tasks/total_tasks*100) if total_tasks > 0 else 0:.1f}%\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        if notes:
            categories = {}
            for note in notes:
                cat = note[4]
                categories[cat] = categories.get(cat, 0) + 1
            
            text += "üìù **–ó–∞–º–µ—Ç–∫–∏:**\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}\n"
            text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories.keys())}\n\n"
        
        if not habits and not tasks and not notes:
            text += "üìä **–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç**\n\n"
            text += "–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        else:
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            quote = random.choice(self.motivational_quotes)
            text += f"üí´ *{quote}*"
        
        update.message.reply_text(text, parse_mode='Markdown')

    def button_handler(self, update: Update, context: CallbackContext):
        query = update.callback_query
        query.answer()
        
        if query.data == "dashboard":
            self.dashboard(query, context)
        elif query.data == "show_stats":
            self.stats(query, context)
        elif query.data == "quick_add":
            keyboard = [
                [InlineKeyboardButton("üéØ –ü—Ä–∏–≤—ã—á–∫–∞", callback_data="quick_habit")],
                [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞", callback_data="quick_task")],
                [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data="quick_note")],
                [InlineKeyboardButton("üìä –ù–∞–∑–∞–¥", callback_data="dashboard")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                "üöÄ **–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    def _create_progress_bar(self, percentage, length=10):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(percentage / 100 * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    def run(self):
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
            return
        
        updater = Updater(self.token, use_context=True)
        dispatcher = updater.dispatcher
        
        # –ö–æ–º–∞–Ω–¥—ã
        dispatcher.add_handler(CommandHandler("start", self.start))
        dispatcher.add_handler(CommandHandler("dashboard", self.dashboard))
        dispatcher.add_handler(CommandHandler("add_habit", self.add_habit))
        dispatcher.add_handler(CommandHandler("add_task", self.add_task))
        dispatcher.add_handler(CommandHandler("add_note", self.add_note))
        dispatcher.add_handler(CommandHandler("stats", self.stats))
        dispatcher.add_handler(CommandHandler("help", self.start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        dispatcher.add_handler(CallbackQueryHandler(self.button_handler))
        
        logger.info("üöÄ Starting Maximoy Bot...")
        updater.start_polling()
        updater.idle()

if __name__ == "__main__":
    bot = MaximoyBot()
    bot.run()
