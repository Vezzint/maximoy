import os
import logging
import json
import datetime
import random
import asyncio
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 6584350034

class MaximoyStorage:
    def __init__(self):
        self.data_dir = "/tmp/maximoy_data"
        os.makedirs(self.data_dir, exist_ok=True)
        self.init_storage()
    
    def init_storage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        default_data = {
            "habits": {},
            "tasks": {},
            "mood": {},
            "achievements": {},
            "users": {},
            "admin_stats": {
                "total_users": 0,
                "total_habits": 0,
                "total_tasks": 0,
                "last_reset": None
            }
        }
        
        for filename, data in default_data.items():
            filepath = os.path.join(self.data_dir, f"{filename}.json")
            if not os.path.exists(filepath):
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ Maximoy Storage initialized")

    def _load_data(self, data_type):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}

    def _save_data(self, data_type, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    # === –•–ê–ë–ò–¢–´ ===
    def add_habit(self, user_id, name, description="", category="general", difficulty="medium"):
        habits = self._load_data("habits")
        admin_stats = self._load_data("admin_stats")
        
        habit_id = str(int(datetime.datetime.now().timestamp() * 1000))
        habits[habit_id] = {
            "user_id": user_id,
            "name": name,
            "description": description,
            "category": category,
            "difficulty": difficulty,
            "streak": 0,
            "best_streak": 0,
            "total_completed": 0,
            "created_date": datetime.datetime.now().isoformat(),
            "progress": {}
        }
        
        admin_stats["total_habits"] += 1
        self._save_data("habits", habits)
        self._save_data("admin_stats", admin_stats)
        return habit_id

    def get_user_habits(self, user_id):
        habits = self._load_data("habits")
        user_habits = []
        
        for habit_id, habit in habits.items():
            if habit["user_id"] == user_id:
                user_habits.append((habit_id, habit))
        
        user_habits.sort(key=lambda x: (-x[1]["streak"], x[1]["created_date"]), reverse=True)
        return user_habits

    def get_all_habits(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        return self._load_data("habits")

    def mark_habit_done(self, habit_id):
        habits = self._load_data("habits")
        
        if habit_id in habits:
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            habit = habits[habit_id]
            
            habit["progress"][today] = {
                "completed": True,
                "timestamp": datetime.datetime.now().isoformat()
            }
            
            habit["streak"] += 1
            habit["total_completed"] += 1
            if habit["streak"] > habit["best_streak"]:
                habit["best_streak"] = habit["streak"]
            
            self._save_data("habits", habits)
            return True
        return False

    # === –ó–ê–î–ê–ß–ò ===
    def add_task(self, user_id, title, description="", priority="medium", due_date=None):
        tasks = self._load_data("tasks")
        admin_stats = self._load_data("admin_stats")
        
        task_id = str(int(datetime.datetime.now().timestamp() * 1000))
        tasks[task_id] = {
            "user_id": user_id,
            "title": title,
            "description": description,
            "priority": priority,
            "due_date": due_date,
            "completed": False,
            "created_date": datetime.datetime.now().isoformat()
        }
        
        admin_stats["total_tasks"] += 1
        self._save_data("tasks", tasks)
        self._save_data("admin_stats", admin_stats)
        return task_id

    def get_user_tasks(self, user_id, completed=False):
        tasks = self._load_data("tasks")
        user_tasks = []
        
        for task_id, task in tasks.items():
            if task["user_id"] == user_id and task["completed"] == completed:
                user_tasks.append((task_id, task))
        
        priority_order = {"high": 1, "medium": 2, "low": 3}
        user_tasks.sort(key=lambda x: (priority_order.get(x[1]["priority"], 4), x[1]["created_date"]))
        return user_tasks

    def get_all_tasks(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        return self._load_data("tasks")

    def mark_task_completed(self, task_id):
        tasks = self._load_data("tasks")
        
        if task_id in tasks:
            tasks[task_id]["completed"] = True
            self._save_data("tasks", tasks)
            return True
        return False

    # === –ù–ê–°–¢–†–û–ï–ù–ò–ï ===
    def add_mood_entry(self, user_id, mood, notes=""):
        mood_data = self._load_data("mood")
        
        entry_id = str(int(datetime.datetime.now().timestamp() * 1000))
        mood_data[entry_id] = {
            "user_id": user_id,
            "mood": mood,
            "notes": notes,
            "timestamp": datetime.datetime.now().isoformat()
        }
        
        self._save_data("mood", mood_data)
        return entry_id

    def get_user_mood_stats(self, user_id, days=7):
        mood_data = self._load_data("mood")
        user_moods = []
        
        cutoff_date = datetime.datetime.now() - timedelta(days=days)
        
        for entry_id, entry in mood_data.items():
            if entry["user_id"] == user_id:
                entry_date = datetime.datetime.fromisoformat(entry["timestamp"])
                if entry_date >= cutoff_date:
                    user_moods.append(entry)
        
        return user_moods

    # === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
    def unlock_achievement(self, user_id, achievement_id):
        achievements = self._load_data("achievements")
        
        if user_id not in achievements:
            achievements[user_id] = {}
        
        achievements[user_id][achievement_id] = {
            "unlocked_at": datetime.datetime.now().isoformat()
        }
        
        self._save_data("achievements", achievements)

    def get_user_achievements(self, user_id):
        achievements = self._load_data("achievements")
        return achievements.get(user_id, {})

    # === –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===
    def get_admin_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        return self._load_data("admin_stats")

    def get_all_users(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        habits = self._load_data("habits")
        tasks = self._load_data("tasks")
        mood = self._load_data("mood")
        
        users = set()
        for data in [habits, tasks, mood]:
            for item in data.values():
                users.add(item["user_id"])
        
        return list(users)

    def reset_all_data(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø–∞—Å–Ω–æ!)"""
        default_data = {
            "habits": {},
            "tasks": {},
            "mood": {},
            "achievements": {},
            "admin_stats": {
                "total_users": 0,
                "total_habits": 0,
                "total_tasks": 0,
                "last_reset": datetime.datetime.now().isoformat()
            }
        }
        
        for filename, data in default_data.items():
            filepath = os.path.join(self.data_dir, f"{filename}.json")
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        
        return True

    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        data = {}
        for filename in ["habits", "tasks", "mood", "achievements", "admin_stats"]:
            data[filename] = self._load_data(filename)
        return json.dumps(data, ensure_ascii=False, indent=2)

class MaximoyBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.storage = MaximoyStorage()
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.mood_emojis = {
            "awesome": "üòé",
            "happy": "üòä", 
            "neutral": "üòê",
            "sad": "üòî",
            "angry": "üò†"
        }
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements = {
            "first_habit": {"name": "üéØ –ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", "desc": "–°–æ–∑–¥–∞–ª –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É"},
            "streak_3": {"name": "üî• –°–µ—Ä–∏—è –∏–∑ 3 –¥–Ω–µ–π", "desc": "–í—ã–ø–æ–ª–Ω—è–ª –ø—Ä–∏–≤—ã—á–∫—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥"},
            "streak_7": {"name": "‚ö° –°–µ—Ä–∏—è –∏–∑ 7 –¥–Ω–µ–π", "desc": "–ù–µ–¥–µ–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏!"},
            "task_master": {"name": "‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞—á", "desc": "–í—ã–ø–æ–ª–Ω–∏–ª 5 –∑–∞–¥–∞—á"},
            "mood_tracker": {"name": "üìä –¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "desc": "–û—Ç–º–µ—Ç–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5 —Ä–∞–∑"},
            "productivity_king": {"name": "üëë –ö–æ—Ä–æ–ª—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "desc": "–í—ã–ø–æ–ª–Ω–∏–ª 10 –ø—Ä–∏–≤—ã—á–µ–∫ –∏ 10 –∑–∞–¥–∞—á"}
        }
        
        self.motivational_quotes = [
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —á–µ–º –≤—á–µ—Ä–∞! üöÄ",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ —Ç–≤–æ—Ä—è—Ç –±–æ–ª—å—à–∏–µ —á—É–¥–µ—Å–∞! ‚ú®",
            "–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –ª—É—á—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
            "–£—Å–ø–µ—Ö —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–±–µ–¥! üèÜ",
            "–¢–≤–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —ç—Ç–æ —Å—É–ø–µ—Ä—Å–∏–ª–∞! ü¶∏‚Äç‚ôÇÔ∏è",
            "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏! ‚è≥",
            "–¢—ã —Å–æ–∑–¥–∞–µ—à—å —Å–≤–æ–µ –±—É–¥—É—â–µ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üîÆ"
        ]

        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
        self.categories = ["üí™ –ó–¥–æ—Ä–æ–≤—å–µ", "üìö –£—á–µ–±–∞", "üíº –†–∞–±–æ—Ç–∞", "üèÉ –°–ø–æ—Ä—Ç", "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "üßò –û—Ç–¥—ã—Ö", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "üë• –û–±—â–µ–Ω–∏–µ"]
        
        logger.info("ü§ñ Maximoy Bot initialized")

    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return user_id == ADMIN_ID

    def get_main_keyboard(self, user_id):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥"""
        buttons = [
            [KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üéØ –ü—Ä–∏–≤—ã—á–∫–∏")],
            [KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∏"), KeyboardButton("üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")],
            [KeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), KeyboardButton("üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
        if self.is_admin(user_id):
            buttons.append([KeyboardButton("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        
        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    def get_habits_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"), KeyboardButton("‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞")],
            [KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    def get_tasks_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton("üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
            [KeyboardButton("‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    def get_mood_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üòé –û—Ç–ª–∏—á–Ω–æ"), KeyboardButton("üòä –•–æ—Ä–æ—à–æ")],
            [KeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ"), KeyboardButton("üòî –ü–ª–æ—Ö–æ")],
            [KeyboardButton("üò† –£–∂–∞—Å–Ω–æ"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    def get_admin_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"), KeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫"), KeyboardButton("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á")],
            [KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"), KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton("üéÆ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"üë§ Start command from user {user.id}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if self.is_admin(user.id):
            welcome_text = f"""üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –í–ª–∞–¥—ã–∫–∞ Maximoy\!* üé≠

*–¢—ã –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†* ‚ö°

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*
üéØ ‚Ä¢ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
üëë ‚Ä¢ –ê–¥–º–∏–Ω\-–ø–∞–Ω–µ–ª—å \(—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\)

*–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ\!* üëá"""
        else:
            welcome_text = f"""üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maximoy, {user.first_name}\!* üöÄ

*–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è:* 
üéØ ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
‚úÖ ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏  
üòä ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üèÜ ‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π

*–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\!* üëá"""

        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.get_main_keyboard(user.id),
            parse_mode='MarkdownV2'
        )

        # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await self._send_welcome_animation(update, context, user.id)

    async def _send_welcome_animation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        if self.is_admin(user_id):
            messages = [
                "‚ö° –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º...",
                "üîê –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...", 
                "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞!",
                "üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!"
            ]
        else:
            messages = [
                "üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...",
                "‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é...", 
                "üöÄ Maximoy –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
                "üí´ –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
            ]
        
        sent_message = await update.message.reply_text("‚ö° *–ó–∞–ø—É—Å–∫–∞–µ–º Maximoy...*", parse_mode='MarkdownV2')
        
        for msg in messages:
            await asyncio.sleep(0.8)
            await sent_message.edit_text(f"‚ö° *{msg}*", parse_mode='MarkdownV2')
        
        await asyncio.sleep(1)
        if self.is_admin(user_id):
            await sent_message.edit_text("üé≠ *–†–µ–∂–∏–º –ë–û–ì–ê –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º\!* üëë", parse_mode='MarkdownV2')
        else:
            await sent_message.edit_text("üéâ *–ì–æ—Ç–æ–≤–æ\! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å—É–ø–µ—Ä\-—Å–∏–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\!* ‚ú®", parse_mode='MarkdownV2')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"üì® Message from {user_id}: {text}")
        
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
            await self.show_progress(update, context)
        elif text == "üéØ –ü—Ä–∏–≤—ã—á–∫–∏":
            await update.message.reply_text(
                "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_habits_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "‚úÖ –ó–∞–¥–∞—á–∏":
            await update.message.reply_text(
                "‚úÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_tasks_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            await update.message.reply_text(
                "üòä *–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?*\n\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self.get_mood_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
            await self.show_achievements(update, context)
        elif text == "üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è":
            await self.send_motivation(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.show_help(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üîô *–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
                reply_markup=self.get_main_keyboard(user_id),
                parse_mode='MarkdownV2'
            )
        
        # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        elif text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and self.is_admin(user_id):
            await update.message.reply_text(
                "üëë *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Maximoy*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_admin_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã" and self.is_admin(user_id):
            await self.show_system_stats(update, context)
        elif text == "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" and self.is_admin(user_id):
            await self.show_all_users(update, context)
        elif text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫" and self.is_admin(user_id):
            await self.show_habits_analytics(update, context)
        elif text == "‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á" and self.is_admin(user_id):
            await self.show_tasks_analytics(update, context)
        elif text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and self.is_admin(user_id):
            await self.confirm_reset_data(update, context)
        elif text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" and self.is_admin(user_id):
            await self.export_all_data(update, context)
        elif text == "üéÆ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏" and self.is_admin(user_id):
            await self.show_test_functions(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        elif text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏":
            await self.show_habits(update, context)
        elif text == "‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞":
            await self.show_habit_categories(update, context)
        elif text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ":
            await self.show_habits_to_mark(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_habits_stats(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
        elif text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            await self.show_tasks(update, context)
        elif text == "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞":
            await update.message.reply_text(
                "‚úÖ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç`\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é | –°–ª–∞–π–¥—ã 1\-10 | –≤—ã—Å–æ–∫–∏–π`\n\n"
                "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π",
                parse_mode='MarkdownV2'
            )
            context.user_data['waiting_for'] = 'new_task'
        elif text == "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
            await self.show_tasks_to_complete(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        elif text in ["üòé –û—Ç–ª–∏—á–Ω–æ", "üòä –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ", "üò† –£–∂–∞—Å–Ω–æ"]:
            mood_map = {
                "üòé –û—Ç–ª–∏—á–Ω–æ": "awesome",
                "üòä –•–æ—Ä–æ—à–æ": "happy", 
                "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ": "neutral",
                "üòî –ü–ª–æ—Ö–æ": "sad",
                "üò† –£–∂–∞—Å–Ω–æ": "angry"
            }
            await self.record_mood(update, context, mood_map[text])
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and update.message.reply_to_message and "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in update.message.reply_to_message.text.lower():
            await self.show_mood_stats(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–≤—ã—á–µ–∫
        elif text in self.categories and context.user_data.get('waiting_for') == 'new_habit_category':
            category = text.split(" ", 1)[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
            context.user_data['new_habit_category'] = category
            await update.message.reply_text(
                f"üéØ *–û—Ç–ª–∏—á–Ω–æ\! –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}*\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                f"`–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ`\n\n"
                f"*–ü—Ä–∏–º–µ—Ä:*\n"
                f"`–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ | 15 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`\n\n"
                f"*–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ:*\n"
                f"`–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥–∏`",
                parse_mode='MarkdownV2'
            )
            context.user_data['waiting_for'] = 'new_habit_details'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        elif context.user_data.get('waiting_for') == 'new_habit_details':
            await self.process_new_habit(update, context)
        elif context.user_data.get('waiting_for') == 'new_task':
            await self.process_new_task(update, context)
        elif context.user_data.get('waiting_for') == 'complete_task':
            await self.process_complete_task(update, context)
        elif context.user_data.get('waiting_for') == 'mark_habit':
            await self.process_mark_habit(update, context)
        elif context.user_data.get('waiting_for') == 'confirm_reset' and self.is_admin(user_id):
            await self.process_reset_data(update, context)

    async def show_habit_categories(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton(cat) for cat in self.categories[:4]],
            [KeyboardButton(cat) for cat in self.categories[4:]],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            "üéØ *–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏:*\n\n"
            "üí™ *–ó–¥–æ—Ä–æ–≤—å–µ* \- —Å–ø–æ—Ä—Ç, –ø–∏—Ç–∞–Ω–∏–µ, —Å–æ–Ω\n"
            "üìö *–£—á–µ–±–∞* \- –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–µ–Ω–∏–µ, –∫—É—Ä—Å—ã\n"
            "üíº *–†–∞–±–æ—Ç–∞* \- –ø—Ä–æ–µ–∫—Ç—ã, –∫–∞—Ä—å–µ—Ä–∞\n"
            "üèÉ *–°–ø–æ—Ä—Ç* \- —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
            "üé® *–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ* \- —Ö–æ–±–±–∏, –∏—Å–∫—É—Å—Å—Ç–≤–æ\n"
            "üßò *–û—Ç–¥—ã—Ö* \- –º–µ–¥–∏—Ç–∞—Ü–∏—è, —Ä–µ–ª–∞–∫—Å\n"
            "üí∞ *–§–∏–Ω–∞–Ω—Å—ã* \- –±—é–¥–∂–µ—Ç, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "üë• *–û–±—â–µ–Ω–∏–µ* \- –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            reply_markup=keyboard,
            parse_mode='MarkdownV2'
        )
        context.user_data['waiting_for'] = 'new_habit_category'

    async def process_new_habit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
        text = update.message.text
        user_id = update.effective_user.id
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–≤–æ–¥–∞
        if "|" in text:
            parts = [part.strip() for part in text.split("|")]
            name = parts[0]
            description = parts[1] if len(parts) > 1 else ""
        else:
            name = text.strip()
            description = ""
        
        category = context.user_data.get('new_habit_category', '–û–±—â–µ–µ')
        
        habit_id = self.storage.add_habit(user_id, name, description, category)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        habits = self.storage.get_user_habits(user_id)
        if len(habits) == 1:
            self.storage.unlock_achievement(user_id, "first_habit")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('waiting_for', None)
        context.user_data.pop('new_habit_category', None)
        
        await update.message.reply_text(
            f"üéâ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\!*\n\n"
            f"*{name}*\n"
            f"üìù {description if description else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üè∑Ô∏è {category}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\! üî•",
            reply_markup=self.get_habits_keyboard(),
            parse_mode='MarkdownV2'
        )

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Ö–æ–∂–∏–º–∏, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏)

    async def show_system_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        stats = self.storage.get_admin_stats()
        all_users = self.storage.get_all_users()
        all_habits = self.storage.get_all_habits()
        all_tasks = self.storage.get_all_tasks()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        active_today = 0
        for habit_id, habit in all_habits.items():
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            if today in habit.get("progress", {}) and habit["progress"][today].get("completed"):
                active_today += 1
        
        text = "üëë *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã Maximoy*\n\n"
        text += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:* {len(all_users)}\n"
        text += f"üéØ *–ü—Ä–∏–≤—ã—á–∫–∏:* {stats['total_habits']}\n"
        text += f"‚úÖ *–ó–∞–¥–∞—á–∏:* {stats['total_tasks']}\n"
        text += f"üî• *–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è:* {active_today}\n\n"
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–∏–≤—ã—á–µ–∫
        categories = {}
        for habit in all_habits.values():
            cat = habit.get('category', '–û–±—â–µ–µ')
            categories[cat] = categories.get(cat, 0) + 1
        
        if categories:
            text += "*üèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π:*\n"
            for cat, count in sorted(categories.items(), key=lambda x: x[1], reverse=True)[:5]:
                text += f"‚Ä¢ {cat}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def show_all_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = self.storage.get_all_users()
        all_habits = self.storage.get_all_habits()
        all_tasks = self.storage.get_all_tasks()
        
        text = "üë• *–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:*\n\n"
        
        for i, user_id in enumerate(users[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            user_habits = [h for h in all_habits.values() if h['user_id'] == user_id]
            user_tasks = [t for t in all_tasks.values() if t['user_id'] == user_id]
            
            text += f"{i}. ID: `{user_id}`\n"
            text += f"   üéØ –ü—Ä–∏–≤—ã—á–µ–∫: {len(user_habits)}\n"
            text += f"   ‚úÖ –ó–∞–¥–∞—á: {len(user_tasks)}\n\n"
        
        if len(users) > 20:
            text += f"... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def show_habits_analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫"""
        all_habits = self.storage.get_all_habits()
        
        if not all_habits:
            await update.message.reply_text("üìä *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö*", parse_mode='MarkdownV2')
            return
        
        text = "üìà *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∏–∫–∞–º
        streaks = [habit['streak'] for habit in all_habits.values()]
        avg_streak = sum(streaks) / len(streaks) if streaks else 0
        max_streak = max(streaks) if streaks else 0
        
        text += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {len(all_habits)}\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Å—Ç—Ä–∏–∫: {avg_streak:.1f} –¥–Ω–µ–π\n"
        text += f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–∫: {max_streak} –¥–Ω–µ–π\n\n"
        
        # –°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
        habit_names = {}
        for habit in all_habits.values():
            name = habit['name']
            habit_names[name] = habit_names.get(name, 0) + 1
        
        if habit_names:
            text += "üèÜ *–°–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:*\n"
            for name, count in sorted(habit_names.items(), key=lambda x: x[1], reverse=True)[:5]:
                text += f"‚Ä¢ {name}: {count}\n"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def confirm_reset_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
        await update.message.reply_text(
            "‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï: –û–ü–ê–°–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø*\n\n"
            "–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:\n"
            "‚Ä¢ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ –í—Å–µ –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "‚Ä¢ –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
            "‚ùå *–≠–¢–û –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û*\n\n"
            "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å: `–î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–ï`",
            parse_mode='MarkdownV2'
        )
        context.user_data['waiting_for'] = 'confirm_reset'

    async def process_reset_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö"""
        if update.message.text == "–î–ê, –£–î–ê–õ–ò–¢–¨ –í–°–ï":
            if self.storage.reset_all_data():
                await update.message.reply_text(
                    "‚ôªÔ∏è *–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã\!*\n\n"
                    "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞\. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞\! üìù",
                    parse_mode='MarkdownV2'
                )
            else:
                await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö*", parse_mode='MarkdownV2')
        else:
            await update.message.reply_text("‚úÖ *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*", parse_mode='MarkdownV2')
        
        context.user_data.pop('waiting_for', None)

    async def export_all_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = self.storage.export_data()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"maximoy_export_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ)
            preview = data[:4000] + "\n\n..." if len(data) > 4000 else data
            
            await update.message.reply_text(
                f"üì§ *–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã*\n\n"
                f"```json\n{preview}\n```\n\n"
                f"*–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö:* {len(data)} —Å–∏–º–≤–æ–ª–æ–≤",
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:* {e}", parse_mode='MarkdownV2')

    async def show_test_functions(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üé≤ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"), KeyboardButton("üéØ –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ")],
            [KeyboardButton("üìä –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            "üéÆ *–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏*\n\n"
            "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=keyboard,
            parse_mode='MarkdownV2'
        )

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–∏–≤—ã—á–µ–∫, –∑–∞–¥–∞—á, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Ö–æ–∂–∏–º–∏)

    def run(self):
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
            return
        
        application = Application.builder().token(self.token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.show_help))
        application.add_handler(CommandHandler("admin", self.show_admin_panel))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("üöÄ Starting Maximoy Bot...")
        application.run_polling()

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin"""
        if self.is_admin(update.effective_user.id):
            await update.message.reply_text(
                "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_admin_keyboard(),
                parse_mode='MarkdownV2'
            )
        else:
            await update.message.reply_text("‚ùå *–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ*", parse_mode='MarkdownV2')

if __name__ == "__main__":
    bot = MaximoyBot()
    bot.run()
