import os
import logging
import sqlite3
import datetime
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class HabitTracker:
    def __init__(self):
        self.db_path = "/tmp/habits.db"
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS habits (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT,
                description TEXT,
                created_date TEXT,
                is_active INTEGER DEFAULT 1
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS progress (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                habit_id INTEGER,
                date TEXT,
                completed INTEGER DEFAULT 0,
                FOREIGN KEY (habit_id) REFERENCES habits (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        logger.info("‚úÖ Database initialized")

    def add_habit(self, user_id, name, description=""):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO habits (user_id, name, description, created_date)
            VALUES (?, ?, ?, ?)
        ''', (user_id, name, description, datetime.datetime.now().isoformat()))
        
        habit_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ Habit added: {name} for user {user_id}")
        return habit_id

    def get_user_habits(self, user_id, active_only=True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if active_only:
            cursor.execute('''
                SELECT * FROM habits 
                WHERE user_id = ? AND is_active = 1 
                ORDER BY created_date DESC
            ''', (user_id,))
        else:
            cursor.execute('''
                SELECT * FROM habits 
                WHERE user_id = ? 
                ORDER BY created_date DESC
            ''', (user_id,))
        
        habits = cursor.fetchall()
        conn.close()
        return habits

    def mark_habit_done(self, habit_id, date=None):
        """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        if date is None:
            date = datetime.datetime.now().strftime("%Y-%m-%d")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ —É–∂–µ –ø—Ä–∏–≤—ã—á–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('''
            SELECT id FROM progress 
            WHERE habit_id = ? AND date = ?
        ''', (habit_id, date))
        
        existing = cursor.fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
                UPDATE progress SET completed = 1 
                WHERE id = ?
            ''', (existing[0],))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute('''
                INSERT INTO progress (habit_id, date, completed)
                VALUES (?, ?, 1)
            ''', (habit_id, date))
        
        conn.commit()
        conn.close()
        logger.info(f"‚úÖ Habit {habit_id} marked as done for {date}")

    def get_habit_progress(self, habit_id, days=30):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        end_date = datetime.datetime.now()
        start_date = end_date - timedelta(days=days)
        
        cursor.execute('''
            SELECT date, completed FROM progress 
            WHERE habit_id = ? AND date BETWEEN ? AND ?
            ORDER BY date
        ''', (habit_id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")))
        
        progress = cursor.fetchall()
        conn.close()
        return progress

    def get_today_progress(self, user_id):
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT h.id, h.name, p.completed 
            FROM habits h 
            LEFT JOIN progress p ON h.id = p.habit_id AND p.date = ?
            WHERE h.user_id = ? AND h.is_active = 1
        ''', (today, user_id))
        
        progress = cursor.fetchall()
        conn.close()
        return progress

class HabitBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.tracker = HabitTracker()
        logger.info("ü§ñ Habit Tracker Bot initialized")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        welcome_text = f"""
üåü **–ü—Ä–∏–≤–µ—Ç, {user.first_name}!**

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π!

üìä **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/add_habit - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
/my_habits - –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏
/today - –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ü–æ–º–æ—â—å

**–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /add_habit —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É!**
        """
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    async def add_habit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if not context.args:
            await update.message.reply_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_habit <–Ω–∞–∑–≤–∞–Ω–∏–µ>\n"
                "–ò–ª–∏: /add_habit <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/add_habit –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞`\n"
                "‚Ä¢ `/add_habit –ß—Ç–µ–Ω–∏–µ | –ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å`\n"
                "‚Ä¢ `/add_habit –ú–µ–¥–∏—Ç–∞—Ü–∏—è`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        if "|" in text:
            name, description = text.split("|", 1)
            name = name.strip()
            description = description.strip()
        else:
            name = text.strip()
            description = ""
        
        habit_id = self.tracker.add_habit(user_id, name, description)
        
        await update.message.reply_text(
            f"‚úÖ **–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!**\n\n"
            f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —á–µ—Ä–µ–∑ /today",
            parse_mode='Markdown'
        )

    async def my_habits(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        habits = self.tracker.get_user_habits(user_id)
        
        if not habits:
            await update.message.reply_text(
                "üìù **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É –∫–æ–º–∞–Ω–¥–æ–π /add_habit",
                parse_mode='Markdown'
            )
            return
        
        text = "üìä **–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:**\n\n"
        keyboard = []
        
        for habit in habits:
            habit_id, _, name, description, created_date, _ = habit
            text += f"‚Ä¢ **{name}**\n"
            if description:
                text += f"  _{description}_\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å: {name}", 
                callback_data=f"mark_done:{habit_id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def today(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        progress = self.tracker.get_today_progress(user_id)
        
        if not progress:
            await update.message.reply_text(
                "üìù **–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_habit",
                parse_mode='Markdown'
            )
            return
        
        text = f"üìÖ **–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —Å–µ–≥–æ–¥–Ω—è** ({today}):\n\n"
        completed_count = 0
        total_count = len(progress)
        keyboard = []
        
        for habit_id, name, completed in progress:
            status = "‚úÖ" if completed else "‚è≥"
            if completed:
                completed_count += 1
            
            text += f"{status} **{name}**\n"
            
            if not completed:
                keyboard.append([InlineKeyboardButton(
                    f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {name}", 
                    callback_data=f"mark_done:{habit_id}"
                )])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        percentage = (completed_count / total_count * 100) if total_count > 0 else 0
        text += f"\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {completed_count}/{total_count} ({percentage:.1f}%)"
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_bar = self._create_progress_bar(percentage)
        text += f"\n{progress_bar}"
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        habits = self.tracker.get_user_habits(user_id)
        
        if not habits:
            await update.message.reply_text(
                "üìä **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_habit",
                parse_mode='Markdown'
            )
            return
        
        text = "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
        
        for habit in habits:
            habit_id, _, name, _, _, _ = habit
            progress = self.tracker.get_habit_progress(habit_id, 7)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            
            completed = sum(1 for _, completed in progress if completed)
            total = len(progress)
            percentage = (completed / total * 100) if total > 0 else 0
            
            progress_bar = self._create_progress_bar(percentage)
            
            text += f"**{name}**\n"
            text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {completed}/{total} –¥–Ω–µ–π\n"
            text += f"{progress_bar} {percentage:.1f}%\n\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        data = query.data
        
        if data.startswith("mark_done:"):
            habit_id = int(data.split(":")[1])
            self.tracker.mark_habit_done(habit_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
            habits = self.tracker.get_user_habits(user_id)
            habit_name = next((h[2] for h in habits if h[0] == habit_id), "–ü—Ä–∏–≤—ã—á–∫–∞")
            
            await query.edit_message_text(
                f"üéâ **–û—Ç–ª–∏—á–Ω–æ!**\n\n"
                f"–ü—Ä–∏–≤—ã—á–∫–∞ **{habit_name}** –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–µ–≥–æ–¥–Ω—è!\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™",
                parse_mode='Markdown'
            )

    def _create_progress_bar(self, percentage, length=10):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(percentage / 100 * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    def run(self):
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
            return
        
        application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("add_habit", self.add_habit))
        application.add_handler(CommandHandler("my_habits", self.my_habits))
        application.add_handler(CommandHandler("today", self.today))
        application.add_handler(CommandHandler("stats", self.stats))
        application.add_handler(CommandHandler("help", self.start))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        logger.info("üöÄ Starting Habit Tracker Bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = HabitBot()
    bot.run()