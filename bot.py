import os
import logging
import json
import datetime
import random
import asyncio
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MaximoyStorage:
    def __init__(self):
        self.data_dir = "/tmp/maximoy_data"
        os.makedirs(self.data_dir, exist_ok=True)
        self.init_storage()
    
    def init_storage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        default_data = {
            "habits": {},
            "tasks": {},
            "mood": {},
            "achievements": {},
            "users": {}
        }
        
        for filename, data in default_data.items():
            filepath = os.path.join(self.data_dir, f"{filename}.json")
            if not os.path.exists(filepath):
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ Maximoy Storage initialized")

    def _load_data(self, data_type):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}

    def _save_data(self, data_type, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    # === –•–ê–ë–ò–¢–´ ===
    def add_habit(self, user_id, name, description="", category="general", difficulty="medium"):
        habits = self._load_data("habits")
        
        habit_id = str(int(datetime.datetime.now().timestamp() * 1000))
        habits[habit_id] = {
            "user_id": user_id,
            "name": name,
            "description": description,
            "category": category,
            "difficulty": difficulty,
            "streak": 0,
            "best_streak": 0,
            "total_completed": 0,
            "created_date": datetime.datetime.now().isoformat(),
            "progress": {}
        }
        
        self._save_data("habits", habits)
        return habit_id

    def get_user_habits(self, user_id):
        habits = self._load_data("habits")
        user_habits = []
        
        for habit_id, habit in habits.items():
            if habit["user_id"] == user_id:
                user_habits.append((habit_id, habit))
        
        user_habits.sort(key=lambda x: (-x[1]["streak"], x[1]["created_date"]), reverse=True)
        return user_habits

    def mark_habit_done(self, habit_id):
        habits = self._load_data("habits")
        
        if habit_id in habits:
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            habit = habits[habit_id]
            
            habit["progress"][today] = {
                "completed": True,
                "timestamp": datetime.datetime.now().isoformat()
            }
            
            habit["streak"] += 1
            habit["total_completed"] += 1
            if habit["streak"] > habit["best_streak"]:
                habit["best_streak"] = habit["streak"]
            
            self._save_data("habits", habits)
            return True
        return False

    # === –ó–ê–î–ê–ß–ò ===
    def add_task(self, user_id, title, description="", priority="medium", due_date=None):
        tasks = self._load_data("tasks")
        
        task_id = str(int(datetime.datetime.now().timestamp() * 1000))
        tasks[task_id] = {
            "user_id": user_id,
            "title": title,
            "description": description,
            "priority": priority,
            "due_date": due_date,
            "completed": False,
            "created_date": datetime.datetime.now().isoformat()
        }
        
        self._save_data("tasks", tasks)
        return task_id

    def get_user_tasks(self, user_id, completed=False):
        tasks = self._load_data("tasks")
        user_tasks = []
        
        for task_id, task in tasks.items():
            if task["user_id"] == user_id and task["completed"] == completed:
                user_tasks.append((task_id, task))
        
        priority_order = {"high": 1, "medium": 2, "low": 3}
        user_tasks.sort(key=lambda x: (priority_order.get(x[1]["priority"], 4), x[1]["created_date"]))
        return user_tasks

    def mark_task_completed(self, task_id):
        tasks = self._load_data("tasks")
        
        if task_id in tasks:
            tasks[task_id]["completed"] = True
            self._save_data("tasks", tasks)
            return True
        return False

    # === –ù–ê–°–¢–†–û–ï–ù–ò–ï ===
    def add_mood_entry(self, user_id, mood, notes=""):
        mood_data = self._load_data("mood")
        
        entry_id = str(int(datetime.datetime.now().timestamp() * 1000))
        mood_data[entry_id] = {
            "user_id": user_id,
            "mood": mood,
            "notes": notes,
            "timestamp": datetime.datetime.now().isoformat()
        }
        
        self._save_data("mood", mood_data)
        return entry_id

    def get_user_mood_stats(self, user_id, days=7):
        mood_data = self._load_data("mood")
        user_moods = []
        
        cutoff_date = datetime.datetime.now() - timedelta(days=days)
        
        for entry_id, entry in mood_data.items():
            if entry["user_id"] == user_id:
                entry_date = datetime.datetime.fromisoformat(entry["timestamp"])
                if entry_date >= cutoff_date:
                    user_moods.append(entry)
        
        return user_moods

    # === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
    def unlock_achievement(self, user_id, achievement_id):
        achievements = self._load_data("achievements")
        
        if user_id not in achievements:
            achievements[user_id] = {}
        
        achievements[user_id][achievement_id] = {
            "unlocked_at": datetime.datetime.now().isoformat()
        }
        
        self._save_data("achievements", achievements)

    def get_user_achievements(self, user_id):
        achievements = self._load_data("achievements")
        return achievements.get(user_id, {})

class MaximoyBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.storage = MaximoyStorage()
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        self.mood_emojis = {
            "awesome": "üòé",
            "happy": "üòä", 
            "neutral": "üòê",
            "sad": "üòî",
            "angry": "üò†"
        }
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        self.achievements = {
            "first_habit": {"name": "üéØ –ü–µ—Ä–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞", "desc": "–°–æ–∑–¥–∞–ª –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É"},
            "streak_3": {"name": "üî• –°–µ—Ä–∏—è –∏–∑ 3 –¥–Ω–µ–π", "desc": "–í—ã–ø–æ–ª–Ω—è–ª –ø—Ä–∏–≤—ã—á–∫—É 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥"},
            "streak_7": {"name": "‚ö° –°–µ—Ä–∏—è –∏–∑ 7 –¥–Ω–µ–π", "desc": "–ù–µ–¥–µ–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏!"},
            "task_master": {"name": "‚úÖ –ú–∞—Å—Ç–µ—Ä –∑–∞–¥–∞—á", "desc": "–í—ã–ø–æ–ª–Ω–∏–ª 5 –∑–∞–¥–∞—á"},
            "mood_tracker": {"name": "üìä –¢—Ä–µ–∫–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", "desc": "–û—Ç–º–µ—Ç–∏–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5 —Ä–∞–∑"}
        }
        
        self.motivational_quotes = [
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —á–µ–º –≤—á–µ—Ä–∞! üöÄ",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ —Ç–≤–æ—Ä—è—Ç –±–æ–ª—å—à–∏–µ —á—É–¥–µ—Å–∞! ‚ú®",
            "–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –ª—É—á—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
            "–£—Å–ø–µ—Ö —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –∏–∑ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–±–µ–¥! üèÜ"
        ]
        
        logger.info("ü§ñ Maximoy Bot initialized")

    def get_main_keyboard(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton("üéØ –ü—Ä–∏–≤—ã—á–∫–∏")],
            [KeyboardButton("‚úÖ –ó–∞–¥–∞—á–∏"), KeyboardButton("üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")],
            [KeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"), KeyboardButton("üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ], resize_keyboard=True)

    def get_habits_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–∏–≤—ã—á–µ–∫"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏"), KeyboardButton("‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞")],
            [KeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    def get_tasks_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–¥–∞—á"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"), KeyboardButton("üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")],
            [KeyboardButton("‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    def get_mood_keyboard(self):
        """–ü–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        return ReplyKeyboardMarkup([
            [KeyboardButton("üòé –û—Ç–ª–∏—á–Ω–æ"), KeyboardButton("üòä –•–æ—Ä–æ—à–æ")],
            [KeyboardButton("üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ"), KeyboardButton("üòî –ü–ª–æ—Ö–æ")],
            [KeyboardButton("üò† –£–∂–∞—Å–Ω–æ"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
        ], resize_keyboard=True)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"üë§ Start command from user {user.id}")
        
        welcome_text = f"""üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maximoy, {user.first_name}\!* üöÄ

*–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è:* 
üéØ ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫
‚úÖ ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏  
üòä ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
üèÜ ‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π

*–ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å\!* üëá"""

        await update.message.reply_text(
            welcome_text, 
            reply_markup=self.get_main_keyboard(),
            parse_mode='MarkdownV2'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._send_welcome_animation(update, context)

    async def _send_welcome_animation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        messages = [
            "üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...",
            "‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏—é...", 
            "üöÄ Maximoy –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
            "üí´ –ù–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!"
        ]
        
        sent_message = await update.message.reply_text("‚ö° *–ó–∞–ø—É—Å–∫–∞–µ–º Maximoy...*", parse_mode='MarkdownV2')
        
        for msg in messages:
            await asyncio.sleep(1)
            await sent_message.edit_text(f"‚ö° *{msg}*", parse_mode='MarkdownV2')
        
        await asyncio.sleep(1)
        await sent_message.edit_text("üéâ *–ì–æ—Ç–æ–≤–æ\! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å—É–ø–µ—Ä\-—Å–∏–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\!* ‚ú®", parse_mode='MarkdownV2')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"üì® Message from {user_id}: {text}")
        
        if text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
            await self.show_progress(update, context)
        elif text == "üéØ –ü—Ä–∏–≤—ã—á–∫–∏":
            await update.message.reply_text(
                "üéØ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_habits_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "‚úÖ –ó–∞–¥–∞—á–∏":
            await update.message.reply_text(
                "‚úÖ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=self.get_tasks_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            await update.message.reply_text(
                "üòä *–ö–∞–∫ —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?*\n\n–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
                reply_markup=self.get_mood_keyboard(),
                parse_mode='MarkdownV2'
            )
        elif text == "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è":
            await self.show_achievements(update, context)
        elif text == "üí´ –ú–æ—Ç–∏–≤–∞—Ü–∏—è":
            await self.send_motivation(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.show_help(update, context)
        elif text == "üîô –ù–∞–∑–∞–¥":
            await update.message.reply_text(
                "üîô *–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
                reply_markup=self.get_main_keyboard(),
                parse_mode='MarkdownV2'
            )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        elif text == "üìã –ú–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏":
            await self.show_habits(update, context)
        elif text == "‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞":
            await update.message.reply_text(
                "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è`\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`–£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ | 15 –º–∏–Ω—É—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π | –ó–¥–æ—Ä–æ–≤—å–µ`\n\n"
                "*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –ó–¥–æ—Ä–æ–≤—å–µ, –£—á–µ–±–∞, –†–∞–±–æ—Ç–∞, –°–ø–æ—Ä—Ç, –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
                parse_mode='MarkdownV2'
            )
            context.user_data['waiting_for'] = 'new_habit'
        elif text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ":
            await self.show_habits_to_mark(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_habits_stats(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á
        elif text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏":
            await self.show_tasks(update, context)
        elif text == "üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞":
            await update.message.reply_text(
                "‚úÖ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏*\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                "`–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç`\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é | –°–ª–∞–π–¥—ã 1\-10 | –≤—ã—Å–æ–∫–∏–π`\n\n"
                "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π",
                parse_mode='MarkdownV2'
            )
            context.user_data['waiting_for'] = 'new_task'
        elif text == "‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
            await self.show_tasks_to_complete(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        elif text in ["üòé –û—Ç–ª–∏—á–Ω–æ", "üòä –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ", "üò† –£–∂–∞—Å–Ω–æ"]:
            mood_map = {
                "üòé –û—Ç–ª–∏—á–Ω–æ": "awesome",
                "üòä –•–æ—Ä–æ—à–æ": "happy", 
                "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ": "neutral",
                "üòî –ü–ª–æ—Ö–æ": "sad",
                "üò† –£–∂–∞—Å–Ω–æ": "angry"
            }
            await self.record_mood(update, context, mood_map[text])
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and update.message.reply_to_message and "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ" in update.message.reply_to_message.text.lower():
            await self.show_mood_stats(update, context)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        elif context.user_data.get('waiting_for') == 'new_habit':
            await self.process_new_habit(update, context)
        elif context.user_data.get('waiting_for') == 'new_task':
            await self.process_new_task(update, context)
        elif context.user_data.get('waiting_for') == 'complete_task':
            await self.process_complete_task(update, context)
        elif context.user_data.get('waiting_for') == 'mark_habit':
            await self.process_mark_habit(update, context)

    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"""
        user_id = update.effective_user.id
        
        habits = self.storage.get_user_habits(user_id)
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        completed_tasks = self.storage.get_user_tasks(user_id, completed=True)
        
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        completed_today = sum(1 for habit_id, habit in habits 
                            if today in habit.get("progress", {}) and habit["progress"][today].get("completed"))
        
        text = "üìä *–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–µ–≥–æ–¥–Ω—è*\n\n"
        
        # –ü—Ä–∏–≤—ã—á–∫–∏
        text += f"üéØ *–ü—Ä–∏–≤—ã—á–∫–∏:* {completed_today}/{len(habits)} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
        if habits:
            total_streak = sum(habit[1]["streak"] for habit in habits)
            text += f"   üî• –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {total_streak} –¥–Ω–µ–π\n"
        
        # –ó–∞–¥–∞—á–∏
        text += f"\n‚úÖ *–ó–∞–¥–∞—á–∏:* {len(tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n"
        text += f"   üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed_tasks)}\n"
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏—è
        if completed_today == len(habits) and len(habits) > 0:
            text += "\nüéâ *–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!* üåü"
        elif completed_today > 0:
            text += f"\nüí™ *–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!*"
        else:
            text += f"\nüöÄ *–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏ —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤!*"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def show_habits(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫"""
        user_id = update.effective_user.id
        habits = self.storage.get_user_habits(user_id)
        
        if not habits:
            await update.message.reply_text(
                "üìù *–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫*\n\n"
                "–ù–∞–∂–º–∏ '‚ûï –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é! üéØ",
                parse_mode='MarkdownV2'
            )
            return
        
        text = "üéØ *–¢–≤–æ–∏ –ø—Ä–∏–≤—ã—á–∫–∏:*\n\n"
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        for i, (habit_id, habit) in enumerate(habits, 1):
            completed = today in habit.get("progress", {}) and habit["progress"][today].get("completed")
            status = "‚úÖ" if completed else "‚è≥"
            text += f"{i}. {status} *{habit['name']}*\n"
            text += f"   üìÖ –°—Ç—Ä–∏–∫: {habit['streak']} –¥–Ω–µ–π"
            if habit['best_streak'] > 0:
                text += f" | üèÜ –õ—É—á—à–∏–π: {habit['best_streak']} –¥–Ω–µ–π"
            text += "\n\n"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def process_new_habit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏"""
        text = update.message.text
        parts = [part.strip() for part in text.split("|")]
        
        if len(parts) < 1:
            await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\!* –ù—É–∂–Ω–æ: `–ù–∞–∑–≤–∞–Ω–∏–µ \| –û–ø–∏—Å–∞–Ω–∏–µ \| –ö–∞—Ç–µ–≥–æ—Ä–∏—è`", parse_mode='MarkdownV2')
            return
        
        name = parts[0]
        description = parts[1] if len(parts) > 1 else ""
        category = parts[2] if len(parts) > 2 else "–û–±—â–µ–µ"
        
        habit_id = self.storage.add_habit(update.effective_user.id, name, description, category)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        habits = self.storage.get_user_habits(update.effective_user.id)
        if len(habits) == 1:
            self.storage.unlock_achievement(update.effective_user.id, "first_habit")
        
        context.user_data.pop('waiting_for', None)
        
        await update.message.reply_text(
            f"üéâ *–ü—Ä–∏–≤—ã—á–∫–∞ —Å–æ–∑–¥–∞–Ω–∞\!*\n\n"
            f"*{name}*\n"
            f"üìù {description if description else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üè∑Ô∏è {category}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\! üî•",
            parse_mode='MarkdownV2'
        )

    async def show_habits_to_mark(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        habits = self.storage.get_user_habits(user_id)
        
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        uncompleted_habits = []
        
        for habit_id, habit in habits:
            if today not in habit.get("progress", {}) or not habit["progress"][today].get("completed"):
                uncompleted_habits.append((habit_id, habit))
        
        if not uncompleted_habits:
            await update.message.reply_text("üéâ *–í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\!* –¢—ã –º–æ–ª–æ–¥–µ—Ü\! üåü", parse_mode='MarkdownV2')
            return
        
        text = "‚úÖ *–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:*\n\n"
        for i, (habit_id, habit) in enumerate(uncompleted_habits, 1):
            text += f"{i}. {habit['name']}\n"
        
        text += "\n*–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ*"
        
        context.user_data['habits_to_mark'] = uncompleted_habits
        context.user_data['waiting_for'] = 'mark_habit'
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def process_mark_habit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ—Ç–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        try:
            habit_num = int(update.message.text) - 1
            habits_to_mark = context.user_data.get('habits_to_mark', [])
            
            if 0 <= habit_num < len(habits_to_mark):
                habit_id, habit = habits_to_mark[habit_num]
                
                if self.storage.mark_habit_done(habit_id):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    user_id = update.effective_user.id
                    habits = self.storage.get_user_habits(user_id)
                    
                    for habit_id, habit_data in habits:
                        if habit_data["streak"] == 3:
                            self.storage.unlock_achievement(user_id, "streak_3")
                        elif habit_data["streak"] == 7:
                            self.storage.unlock_achievement(user_id, "streak_7")
                    
                    context.user_data.pop('waiting_for', None)
                    context.user_data.pop('habits_to_mark', None)
                    
                    await update.message.reply_text(
                        f"üéâ *{habit['name']} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è\!*\n\n"
                        f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {habit['streak'] + 1} –¥–Ω–µ–π\n"
                        f"üí™ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å\!",
                        parse_mode='MarkdownV2'
                    )
                else:
                    await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏*", parse_mode='MarkdownV2')
            else:
                await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏*", parse_mode='MarkdownV2')
                
        except ValueError:
            await update.message.reply_text("‚ùå *–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –ø—Ä–∏–≤—ã—á–∫–∏* \(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1\)", parse_mode='MarkdownV2')

    async def show_tasks(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        user_id = update.effective_user.id
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        
        if not tasks:
            await update.message.reply_text(
                "‚úÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n"
                "–ù–∞–∂–º–∏ 'üÜï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é\!",
                parse_mode='MarkdownV2'
            )
            return
        
        text = "‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
        
        for i, (task_id, task) in enumerate(tasks, 1):
            priority_icon = "üî¥" if task["priority"] == "high" else "üü°" if task["priority"] == "medium" else "üü¢"
            due_text = f" ‚è∞ {task['due_date']}" if task["due_date"] else ""
            text += f"{i}. {priority_icon} *{task['title']}*{due_text}\n"
            if task["description"]:
                text += f"   üìù {task['description']}\n"
            text += "\n"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def process_new_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        text = update.message.text
        parts = [part.strip() for part in text.split("|")]
        
        if len(parts) < 1:
            await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\!* –ù—É–∂–Ω–æ: `–ù–∞–∑–≤–∞–Ω–∏–µ \| –û–ø–∏—Å–∞–Ω–∏–µ \| –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç`", parse_mode='MarkdownV2')
            return
        
        title = parts[0]
        description = parts[1] if len(parts) > 1 else ""
        priority = parts[2] if len(parts) > 2 else "medium"
        
        task_id = self.storage.add_task(update.effective_user.id, title, description, priority)
        
        context.user_data.pop('waiting_for', None)
        
        await update.message.reply_text(
            f"‚úÖ *–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞\!*\n\n"
            f"*{title}*\n"
            f"üìù {description if description else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
            f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å\! üí™",
            parse_mode='MarkdownV2'
        )

    async def show_tasks_to_complete(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        
        if not tasks:
            await update.message.reply_text("‚úÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è*", parse_mode='MarkdownV2')
            return
        
        text = "‚úîÔ∏è *–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É:*\n\n"
        for i, (task_id, task) in enumerate(tasks, 1):
            text += f"{i}. {task['title']}\n"
        
        text += "\n*–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é*"
        
        context.user_data['tasks_to_complete'] = tasks
        context.user_data['waiting_for'] = 'complete_task'
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def process_complete_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            task_num = int(update.message.text) - 1
            tasks_to_complete = context.user_data.get('tasks_to_complete', [])
            
            if 0 <= task_num < len(tasks_to_complete):
                task_id, task = tasks_to_complete[task_num]
                
                if self.storage.mark_task_completed(task_id):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
                    user_id = update.effective_user.id
                    completed_tasks = self.storage.get_user_tasks(user_id, completed=True)
                    if len(completed_tasks) >= 5:
                        self.storage.unlock_achievement(user_id, "task_master")
                    
                    context.user_data.pop('waiting_for', None)
                    context.user_data.pop('tasks_to_complete', None)
                    
                    await update.message.reply_text(
                        f"üéâ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\!*\n\n"
                        f"*{task['title']}* \- ‚úÖ –í–´–ü–û–õ–ù–ï–ù–û\n\n"
                        f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞\! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\! üöÄ",
                        parse_mode='MarkdownV2'
                    )
                else:
                    await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏*", parse_mode='MarkdownV2')
            else:
                await update.message.reply_text("‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏*", parse_mode='MarkdownV2')
                
        except ValueError:
            await update.message.reply_text("‚ùå *–û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏* \(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1\)", parse_mode='MarkdownV2')

    async def record_mood(self, update: Update, context: ContextTypes.DEFAULT_TYPE, mood: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        mood_emoji = self.mood_emojis.get(mood, "üòê")
        
        self.storage.add_mood_entry(user_id, mood)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
        mood_entries = self.storage.get_user_mood_stats(user_id, days=30)
        if len(mood_entries) >= 5:
            self.storage.unlock_achievement(user_id, "mood_tracker")
        
        mood_responses = {
            "awesome": "üòé *–°—É–ø–µ—Ä\!* –†–∞–¥ —á—Ç–æ —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å\! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\! üåü",
            "happy": "üòä *–û—Ç–ª–∏—á–Ω–æ\!* –•–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ \- –∑–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\! üí™", 
            "neutral": "üòê *–ü–æ–Ω—è—Ç–Ω–æ\.* –ò–Ω–æ–≥–¥–∞ —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å \- —ç—Ç–æ —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–æ\! üåà",
            "sad": "üòî *–°–æ—á—É–≤—Å—Ç–≤—É—é\.* –ü–æ–º–Ω–∏: –ø–æ—Å–ª–µ –¥–æ–∂–¥—è –≤—Å–µ–≥–¥–∞ –≤—ã—Ö–æ–¥–∏—Ç —Å–æ–ª–Ω—Ü–µ\! ‚òÄÔ∏è",
            "angry": "üò† *–ü–æ–Ω–∏–º–∞—é\.* –ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –∏ –ø–æ–¥—ã—à–∞—Ç—å –≥–ª—É–±–æ–∫–æ\! üßò‚Äç‚ôÇÔ∏è"
        }
        
        response = mood_responses.get(mood, "–°–ø–∞—Å–∏–±–æ –∑–∞ÂàÜ‰∫´ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è\!")
        
        await update.message.reply_text(
            f"{mood_emoji} *–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ\!*\n\n{response}",
            parse_mode='MarkdownV2'
        )

    async def show_mood_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        user_id = update.effective_user.id
        mood_entries = self.storage.get_user_mood_stats(user_id, days=7)
        
        if not mood_entries:
            await update.message.reply_text(
                "üìä *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é*\n\n"
                "–û—Ç–º–µ—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\!",
                parse_mode='MarkdownV2'
            )
            return
        
        mood_count = {}
        for entry in mood_entries:
            mood = entry["mood"]
            mood_count[mood] = mood_count.get(mood, 0) + 1
        
        text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é:*\n\n"
        
        for mood, count in mood_count.items():
            emoji = self.mood_emojis.get(mood, "üòê")
            percentage = (count / len(mood_entries)) * 100
            text += f"{emoji} {mood.capitalize()}: {count} —Ä–∞–∑ ({percentage:.1f}%)\n"
        
        most_common_mood = max(mood_count.items(), key=lambda x: x[1])[0] if mood_count else None
        if most_common_mood:
            emoji = self.mood_emojis.get(most_common_mood, "üòê")
            text += f"\nüéØ *–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:* {emoji} {most_common_mood.capitalize()}"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def show_achievements(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_achievements = self.storage.get_user_achievements(user_id)
        
        text = "üèÜ *–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
        
        if not user_achievements:
            text += "üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç*\n\n"
            text += "–°–æ–∑–¥–∞–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–º–µ—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\! üîì"
        else:
            for achievement_id, achievement_data in user_achievements.items():
                achievement = self.achievements.get(achievement_id, {})
                text += f"‚úÖ *{achievement.get('name', '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ')}*\n"
                text += f"   üìù {achievement.get('desc', '')}\n"
                unlocked_at = datetime.datetime.fromisoformat(achievement_data['unlocked_at']).strftime("%d.%m.%Y")
                text += f"   üóìÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: {unlocked_at}\n\n"
        
        total_achievements = len(self.achievements)
        unlocked_count = len(user_achievements)
        text += f"üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {unlocked_count}/{total_achievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def send_motivation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        quote = random.choice(self.motivational_quotes)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
        emojis = ["üí´", "üöÄ", "üåü", "üî•", "‚ö°", "üéØ", "üèÜ", "üí™"]
        emoji = random.choice(emojis)
        
        await update.message.reply_text(
            f"{emoji} *–ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{quote}",
            parse_mode='MarkdownV2'
        )

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ Maximoy* ü§ñ

*üéØ –ü—Ä–∏–≤—ã—á–∫–∏*
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –°—Ç—Ä–æ–π —Å—Ç—Ä–∏–∫–∏ –∏ —Å—Ç–∞–≤—å —Ä–µ–∫–æ—Ä–¥—ã
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: –ó–¥–æ—Ä–æ–≤—å–µ, –£—á–µ–±–∞, –†–∞–±–æ—Ç–∞, –°–ø–æ—Ä—Ç, –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ

*‚úÖ –ó–∞–¥–∞—á–∏*  
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π

*üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ*
‚Ä¢ –û—Ç–º–µ—á–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
‚Ä¢ –°–ª–µ–¥–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
‚Ä¢ –≠–º–æ–¥–∑–∏: üòé –û—Ç–ª–∏—á–Ω–æ, üòä –•–æ—Ä–æ—à–æ, üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ, üòî –ü–ª–æ—Ö–æ, üò† –£–∂–∞—Å–Ω–æ

*üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è*
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚Ä¢ –°–æ–±–∏—Ä–∞–π –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é

*üí´ –°–æ–≤–µ—Ç—ã:*
‚Ä¢ –ù–∞—á–∏–Ω–∞–π —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–∏–≤—ã—á–µ–∫
‚Ä¢ –û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ç—Ä–æ–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

*Maximoy –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\!* üåü"""

        await update.message.reply_text(help_text, parse_mode='MarkdownV2')

    def run(self):
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
            return
        
        application = Application.builder().token(self.token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.show_help))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–∫–∏)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("üöÄ Starting Maximoy Bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = MaximoyBot()
    bot.run()
