import os
import logging
import json
import datetime
import random
from datetime import timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class MaximoyStorage:
    def __init__(self):
        self.data_dir = "/tmp/maximoy_data"
        os.makedirs(self.data_dir, exist_ok=True)
        self.init_storage()
    
    def init_storage(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        default_data = {
            "habits": {},
            "tasks": {},
            "notes": {},
            "users": {}
        }
        
        for filename, data in default_data.items():
            filepath = os.path.join(self.data_dir, f"{filename}.json")
            if not os.path.exists(filepath):
                with open(filepath, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
        
        logger.info("‚úÖ Maximoy Storage initialized")

    def _load_data(self, data_type):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}

    def _save_data(self, data_type, data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        filepath = os.path.join(self.data_dir, f"{data_type}.json")
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    # === –•–ê–ë–ò–¢–´ ===
    def add_habit(self, user_id, name, description="", category="general", difficulty="medium"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏"""
        habits = self._load_data("habits")
        
        habit_id = str(int(datetime.datetime.now().timestamp() * 1000))
        habits[habit_id] = {
            "user_id": user_id,
            "name": name,
            "description": description,
            "category": category,
            "difficulty": difficulty,
            "streak": 0,
            "best_streak": 0,
            "created_date": datetime.datetime.now().isoformat(),
            "progress": {}
        }
        
        self._save_data("habits", habits)
        logger.info(f"‚úÖ Habit added: {name} for user {user_id}")
        return habit_id

    def get_user_habits(self, user_id, active_only=True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        habits = self._load_data("habits")
        user_habits = []
        
        for habit_id, habit in habits.items():
            if habit["user_id"] == user_id:
                user_habits.append((habit_id, habit))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—Ç—Ä–∏–∫—É –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        user_habits.sort(key=lambda x: (-x[1]["streak"], x[1]["created_date"]), reverse=True)
        return user_habits

    def mark_habit_done(self, habit_id, notes=""):
        """–û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏"""
        habits = self._load_data("habits")
        
        if habit_id in habits:
            today = datetime.datetime.now().strftime("%Y-%m-%d")
            habit = habits[habit_id]
            
            # –û—Ç–º–µ—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            habit["progress"][today] = {
                "completed": True,
                "notes": notes,
                "timestamp": datetime.datetime.now().isoformat()
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
            habit["streak"] += 1
            if habit["streak"] > habit["best_streak"]:
                habit["best_streak"] = habit["streak"]
            
            self._save_data("habits", habits)
            logger.info(f"‚úÖ Habit {habit_id} marked as done")

    # === –ó–ê–î–ê–ß–ò ===
    def add_task(self, user_id, title, description="", priority="medium", due_date=None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        tasks = self._load_data("tasks")
        
        task_id = str(int(datetime.datetime.now().timestamp() * 1000))
        tasks[task_id] = {
            "user_id": user_id,
            "title": title,
            "description": description,
            "priority": priority,
            "due_date": due_date,
            "completed": False,
            "created_date": datetime.datetime.now().isoformat()
        }
        
        self._save_data("tasks", tasks)
        return task_id

    def get_user_tasks(self, user_id, completed=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        tasks = self._load_data("tasks")
        user_tasks = []
        
        for task_id, task in tasks.items():
            if task["user_id"] == user_id and task["completed"] == completed:
                user_tasks.append((task_id, task))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {"high": 1, "medium": 2, "low": 3}
        user_tasks.sort(key=lambda x: (priority_order.get(x[1]["priority"], 4), x[1]["created_date"]))
        return user_tasks

    def mark_task_completed(self, task_id):
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        tasks = self._load_data("tasks")
        
        if task_id in tasks:
            tasks[task_id]["completed"] = True
            self._save_data("tasks", tasks)

    # === –ó–ê–ú–ï–¢–ö–ò ===
    def add_note(self, user_id, title, content, category="general"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏"""
        notes = self._load_data("notes")
        
        note_id = str(int(datetime.datetime.now().timestamp() * 1000))
        now = datetime.datetime.now().isoformat()
        notes[note_id] = {
            "user_id": user_id,
            "title": title,
            "content": content,
            "category": category,
            "created_date": now,
            "updated_date": now
        }
        
        self._save_data("notes", notes)
        return note_id

    def get_user_notes(self, user_id, category=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        notes = self._load_data("notes")
        user_notes = []
        
        for note_id, note in notes.items():
            if note["user_id"] == user_id:
                if category is None or note["category"] == category:
                    user_notes.append((note_id, note))
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        user_notes.sort(key=lambda x: x[1]["updated_date"], reverse=True)
        return user_notes

class MaximoyBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.storage = MaximoyStorage()
        self.motivational_quotes = [
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåü",
            "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üö∂‚Äç‚ôÇÔ∏è",
            "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è! –£ —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∞–µ—Ç—Å—è! üí™",
            "–°–µ–≥–æ–¥–Ω—è - –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π! üåà",
            "–ü–æ–º–Ω–∏: –¥–∞–∂–µ —Å–∞–º—ã–µ –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞! üéØ",
            "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å! üìà",
            "–¢—ã –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏, —á–µ–º –±—ã–ª –≤—á–µ—Ä–∞! üéâ",
            "–ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è! ‚è∞",
            "–¢–≤–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —ç—Ç–æ —Ç–≤–æ—è —Å—É–ø–µ—Ä—Å–∏–ª–∞! ü¶∏‚Äç‚ôÇÔ∏è",
            "–ö–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —É—Å–ø–µ—Ö—É! üéØ"
        ]
        logger.info("ü§ñ Maximoy Bot initialized")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"üë§ Start command from user {user.id}")
        
        welcome_text = f"""üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Maximoy, {user.first_name}\!*

–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∞–º–∏, –∑–∞–¥–∞—á–∞–º–∏ –∏ –∑–∞–º–µ—Ç–∫–∞–º–∏\!

*üìä –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*

*üéØ –ü—Ä–∏–≤—ã—á–∫–∏*
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ç—Ä–∏–∫–∏
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏

*‚úÖ –ó–∞–¥–∞—á–∏* 
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

*üìù –ó–∞–º–µ—Ç–∫–∏*
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
‚Ä¢ –ü–æ–∏—Å–∫ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

*üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞*
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞

*üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/add\_habit \- –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
/add\_task \- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É  
/add\_note \- –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/dashboard \- –û–±–∑–æ—Ä –¥–Ω—è
/stats \- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help \- –ü–æ–º–æ—â—å

*Maximoy –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å—Ç–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\!* ‚ú®"""
        
        keyboard = [
            [InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É", callback_data="quick_add_habit")],
            [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="quick_add_task")],
            [InlineKeyboardButton("üìù –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ—Ç–∫–∞", callback_data="quick_note")],
            [InlineKeyboardButton("üìä –î–∞—à–±–æ—Ä–¥", callback_data="dashboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='MarkdownV2')

    async def dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ü–æ–ª—É—á–∞–µ–º user_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ update
        if hasattr(update, 'message') and update.message:
            user_id = update.effective_user.id
            message = update.message
        else:
            user_id = update.callback_query.from_user.id
            message = update.callback_query.message
            
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        habits = self.storage.get_user_habits(user_id)
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        
        text = f"üìä *–î–∞—à–±–æ—Ä–¥ Maximoy* ‚Ä¢ {today}\n\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        completed_today = 0
        total_habits = len(habits)
        
        for habit_id, habit in habits:
            if today in habit.get("progress", {}) and habit["progress"][today].get("completed"):
                completed_today += 1
        
        habit_percentage = (completed_today / total_habits * 100) if total_habits > 0 else 0
        
        text += f"üéØ *–ü—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è:* {completed_today}/{total_habits}\n"
        text += f"{self._create_progress_bar(habit_percentage)} {habit_percentage:.0f}%\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        high_priority = sum(1 for task_id, task in tasks if task["priority"] == 'high')
        medium_priority = sum(1 for task_id, task in tasks if task["priority"] == 'medium')
        low_priority = sum(1 for task_id, task in tasks if task["priority"] == 'low')
        
        text += f"‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:* {len(tasks)}\n"
        text += f"   üî¥ –í—ã—Å–æ–∫–∏–π: {high_priority} | üü° –°—Ä–µ–¥–Ω–∏–π: {medium_priority} | üü¢ –ù–∏–∑–∫–∏–π: {low_priority}\n\n"
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        quote = random.choice(self.motivational_quotes)
        text += f"üí´ *{quote}*"
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = []
        for habit_id, habit in habits[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–≤—ã—á–∫–∏
            if today not in habit.get("progress", {}) or not habit["progress"][today].get("completed"):
                keyboard.append([InlineKeyboardButton(
                    f"‚úÖ {habit['name']}", 
                    callback_data=f"mark_habit:{habit_id}"
                )])
        
        if not keyboard and habits:
            keyboard.append([InlineKeyboardButton("üéâ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", callback_data="celebrate")])
        
        keyboard.extend([
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="show_tasks")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ", callback_data="quick_add")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def add_habit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text(
                "üéØ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n"
                "–§–æ—Ä–º–∞—Ç: /add\_habit <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> | <—Å–ª–æ–∂–Ω–æ—Å—Ç—å>\n\n"
                "*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –∑–¥–æ—Ä–æ–≤—å–µ, —É—á–µ–±–∞, —Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ\n"
                "*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* –ª–µ–≥–∫–∞—è, —Å—Ä–µ–¥–Ω—è—è, —Å–ª–æ–∂–Ω–∞—è\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ `/add_habit –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞`\n"
                "‚Ä¢ `/add_habit –ß—Ç–µ–Ω–∏–µ | –ß–∏—Ç–∞—Ç—å 30 –º–∏–Ω—É—Ç | —É—á–µ–±–∞ | —Å—Ä–µ–¥–Ω—è—è`\n"
                "‚Ä¢ `/add_habit –ú–µ–¥–∏—Ç–∞—Ü–∏—è | 10 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º | –∑–¥–æ—Ä–æ–≤—å–µ | –ª–µ–≥–∫–∞—è`",
                parse_mode='Markdown'
            )
            return
        
        text = " ".join(context.args)
        parts = [part.strip() for part in text.split("|")]
        
        name = parts[0]
        description = parts[1] if len(parts) > 1 else ""
        category = parts[2] if len(parts) > 2 else "general"
        difficulty = parts[3] if len(parts) > 3 else "medium"
        
        habit_id = self.storage.add_habit(update.effective_user.id, name, description, category, difficulty)
        
        await update.message.reply_text(
            f"‚úÖ *–ü—Ä–∏–≤—ã—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\!*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"*–°–ª–æ–∂–Ω–æ—Å—Ç—å:* {difficulty}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\! üéØ",
            parse_mode='MarkdownV2'
        )

    async def add_task(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text(
                "‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n"
                "–§–æ—Ä–º–∞—Ç: /add\_task <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç> | <—Å—Ä–æ–∫>\n\n"
                "*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* –≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π\n"
                "*–°—Ä–æ–∫:* –ì–ì–ì–ì\-–ú–ú\-–î–î –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞'\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ `/add_task –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é`\n"
                "‚Ä¢ `/add_task –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã | –ú–æ–ª–æ–∫–æ, —Ö–ª–µ–± | –≤—ã—Å–æ–∫–∏–π | —Å–µ–≥–æ–¥–Ω—è`\n"
                "‚Ä¢ `/add_task –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É | 50 —Å—Ç—Ä–∞–Ω–∏—Ü | —Å—Ä–µ–¥–Ω–∏–π | 2024\-12\-31`",
                parse_mode='MarkdownV2'
            )
            return
        
        text = " ".join(context.args)
        parts = [part.strip() for part in text.split("|")]
        
        title = parts[0]
        description = parts[1] if len(parts) > 1 else ""
        priority = parts[2] if len(parts) > 2 else "medium"
        due_date = parts[3] if len(parts) > 3 else None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
        if due_date == '—Å–µ–≥–æ–¥–Ω—è':
            due_date = datetime.datetime.now().strftime("%Y-%m-%d")
        elif due_date == '–∑–∞–≤—Ç—Ä–∞':
            due_date = (datetime.datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        
        task_id = self.storage.add_task(update.effective_user.id, title, description, priority, due_date)
        
        await update.message.reply_text(
            f"‚úÖ *–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\!*\n\n"
            f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {title}\n"
            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {description if description else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority}\n"
            f"*–°—Ä–æ–∫:* {due_date if due_date else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Å—Ä–æ–∫\! ‚è∞",
            parse_mode='MarkdownV2'
        )

    async def add_note(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text(
                "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏*\n\n"
                "–§–æ—Ä–º–∞—Ç: /add\_note <–∑–∞–≥–æ–ª–æ–≤–æ–∫> | <—Ç–µ–∫—Å—Ç> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n\n"
                "*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:* –∏–¥–µ–∏, –º—ã—Å–ª–∏, –∑–∞–¥–∞—á–∏, —Å—Å—ã–ª–∫–∏, –ª–∏—á–Ω–æ–µ\n\n"
                "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
                "‚Ä¢ `/add_note –ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ | –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤`\n"
                "‚Ä¢ `/add_note –ú—ã—Å–ª–∏ | –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ø–æ—Ä—Ç–∞ | –∑–¥–æ—Ä–æ–≤—å–µ`\n"
                "‚Ä¢ `/add_note –°—Å—ã–ª–∫–∞ | https://example\.com | —Å—Å—ã–ª–∫–∏`",
                parse_mode='MarkdownV2'
            )
            return
        
        text = " ".join(context.args)
        parts = [part.strip() for part in text.split("|")]
        
        title = parts[0]
        content = parts[1] if len(parts) > 1 else ""
        category = parts[2] if len(parts) > 2 else "general"
        
        note_id = self.storage.add_note(update.effective_user.id, title, content, category)
        
        await update.message.reply_text(
            f"üìù *–ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\!*\n\n"
            f"*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* {title}\n"
            f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"*–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:* {content if content else '–ü—É—Å—Ç–æ'}\n\n"
            f"–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\! üíæ",
            parse_mode='MarkdownV2'
        )

    async def stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        habits = self.storage.get_user_habits(user_id)
        tasks = self.storage.get_user_tasks(user_id)
        notes = self.storage.get_user_notes(user_id)
        
        text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Maximoy*\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫
        if habits:
            total_streak = sum(habit[1]["streak"] for habit in habits)
            best_streak = max((habit[1]["best_streak"] for habit in habits), default=0)
            
            text += "*üéØ –ü—Ä–∏–≤—ã—á–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {len(habits)}\n"
            text += f"‚Ä¢ –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {total_streak} –¥–Ω–µ–π\n"
            text += f"‚Ä¢ –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: {best_streak} –¥–Ω–µ–π\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        if tasks:
            completed_tasks = sum(1 for task_id, task in tasks if task["completed"])
            total_tasks = len(tasks)
            
            text += "*‚úÖ –ó–∞–¥–∞—á–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
            text += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {(completed_tasks/total_tasks*100) if total_tasks > 0 else 0:.1f}%\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        if notes:
            categories = {}
            for note_id, note in notes:
                cat = note["category"]
                categories[cat] = categories.get(cat, 0) + 1
            
            text += "*üìù –ó–∞–º–µ—Ç–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}\n"
            text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories.keys())}\n\n"
        
        if not habits and not tasks and not notes:
            text += "*üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç*\n\n"
            text += "–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        else:
            # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            quote = random.choice(self.motivational_quotes)
            text += f"üí´ *{quote}*"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """*üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Maximoy:*

*üéØ –ü—Ä–∏–≤—ã—á–∫–∏*
/add\_habit \- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É
/dashboard \- –û–±–∑–æ—Ä –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

*‚úÖ –ó–∞–¥–∞—á–∏*
/add\_task \- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É

*üìù –ó–∞–º–µ—Ç–∫–∏*
/add\_note \- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É

*üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞*
/stats \- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

*üîß –û–±—â–µ–µ*
/start \- –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help \- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*üí´ Maximoy \- —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\!*"""
        
        await update.message.reply_text(help_text, parse_mode='MarkdownV2')

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        logger.info(f"üîò Button pressed by {user_id}: {data}")
        
        try:
            if data == "dashboard":
                await self._send_dashboard(query)
            elif data == "show_stats":
                await self._send_stats(query)
            elif data == "quick_add":
                await self._show_quick_add_menu(query)
            elif data.startswith("mark_habit:"):
                habit_id = data.split(":")[1]
                self.storage.mark_habit_done(habit_id)
                await query.edit_message_text("‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ", parse_mode='Markdown')
            elif data == "celebrate":
                await query.edit_message_text("üéâ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢—ã –ø—Ä–æ—Å—Ç–æ —Å—É–ø–µ—Ä! üåü", parse_mode='Markdown')
            elif data == "quick_add_habit":
                await query.edit_message_text(
                    "üéØ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "`/add_habit <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> | <—Å–ª–æ–∂–Ω–æ—Å—Ç—å>`\n\n"
                    "*–ü—Ä–∏–º–µ—Ä:*\n"
                    "`/add_habit –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ | 15 –º–∏–Ω—É—Ç —É—Ç—Ä–æ–º | –∑–¥–æ—Ä–æ–≤—å–µ | –ª–µ–≥–∫–∞—è`",
                    parse_mode='Markdown'
                )
            elif data == "quick_add_task":
                await query.edit_message_text(
                    "‚úÖ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "`/add_task <–Ω–∞–∑–≤–∞–Ω–∏–µ> | <–æ–ø–∏—Å–∞–Ω–∏–µ> | <–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç> | <—Å—Ä–æ–∫>`\n\n"
                    "*–ü—Ä–∏–º–µ—Ä:*\n"
                    "`/add_task –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é | –°–ª–∞–π–¥—ã 1-10 | –≤—ã—Å–æ–∫–∏–π | —Å–µ–≥–æ–¥–Ω—è`",
                    parse_mode='Markdown'
                )
            elif data == "quick_note":
                await query.edit_message_text(
                    "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏*\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    "`/add_note <–∑–∞–≥–æ–ª–æ–≤–æ–∫> | <—Ç–µ–∫—Å—Ç> | <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>`\n\n"
                    "*–ü—Ä–∏–º–µ—Ä:*\n"
                    "`/add_note –ò–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞ | –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤ | –∏–¥–µ–∏`",
                    parse_mode='Markdown'
                )
            elif data == "show_tasks":
                await self._show_tasks(query)
                
        except Exception as e:
            logger.error(f"‚ùå Button handler error: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def _send_dashboard(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è callback query"""
        user_id = query.from_user.id
        today = datetime.datetime.now().strftime("%Y-%m-%d")
        
        habits = self.storage.get_user_habits(user_id)
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        
        text = f"üìä *–î–∞—à–±–æ—Ä–¥ Maximoy* ‚Ä¢ {today}\n\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏–≤—ã—á–µ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        completed_today = 0
        total_habits = len(habits)
        
        for habit_id, habit in habits:
            if today in habit.get("progress", {}) and habit["progress"][today].get("completed"):
                completed_today += 1
        
        habit_percentage = (completed_today / total_habits * 100) if total_habits > 0 else 0
        
        text += f"üéØ *–ü—Ä–∏–≤—ã—á–∫–∏ —Å–µ–≥–æ–¥–Ω—è:* {completed_today}/{total_habits}\n"
        text += f"{self._create_progress_bar(habit_percentage)} {habit_percentage:.0f}%\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        high_priority = sum(1 for task_id, task in tasks if task["priority"] == 'high')
        medium_priority = sum(1 for task_id, task in tasks if task["priority"] == 'medium')
        low_priority = sum(1 for task_id, task in tasks if task["priority"] == 'low')
        
        text += f"‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:* {len(tasks)}\n"
        text += f"   üî¥ –í—ã—Å–æ–∫–∏–π: {high_priority} | üü° –°—Ä–µ–¥–Ω–∏–π: {medium_priority} | üü¢ –ù–∏–∑–∫–∏–π: {low_priority}\n\n"
        
        # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        quote = random.choice(self.motivational_quotes)
        text += f"üí´ *{quote}*"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = []
        for habit_id, habit in habits[:3]:
            if today not in habit.get("progress", {}) or not habit["progress"][today].get("completed"):
                keyboard.append([InlineKeyboardButton(f"‚úÖ {habit['name']}", callback_data=f"mark_habit:{habit_id}")])
        
        if not keyboard and habits:
            keyboard.append([InlineKeyboardButton("üéâ –í—Å–µ –ø—Ä–∏–≤—ã—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!", callback_data="celebrate")])
        
        keyboard.extend([
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", callback_data="show_tasks")],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton("üéØ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ", callback_data="quick_add")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _send_stats(self, query):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è callback query"""
        user_id = query.from_user.id
        
        habits = self.storage.get_user_habits(user_id)
        tasks = self.storage.get_user_tasks(user_id)
        notes = self.storage.get_user_notes(user_id)
        
        text = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Maximoy*\n\n"
        
        if habits:
            total_streak = sum(habit[1]["streak"] for habit in habits)
            best_streak = max((habit[1]["best_streak"] for habit in habits), default=0)
            
            text += "*üéØ –ü—Ä–∏–≤—ã—á–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–≤—ã—á–µ–∫: {len(habits)}\n"
            text += f"‚Ä¢ –û–±—â–∏–π —Å—Ç—Ä–∏–∫: {total_streak} –¥–Ω–µ–π\n"
            text += f"‚Ä¢ –õ—É—á—à–∏–π —Å—Ç—Ä–∏–∫: {best_streak} –¥–Ω–µ–π\n\n"
        
        if tasks:
            completed_tasks = sum(1 for task_id, task in tasks if task["completed"])
            total_tasks = len(tasks)
            
            text += "*‚úÖ –ó–∞–¥–∞—á–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total_tasks}\n"
            text += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks}\n"
            text += f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å: {(completed_tasks/total_tasks*100) if total_tasks > 0 else 0:.1f}%\n\n"
        
        if notes:
            categories = {}
            for note_id, note in notes:
                cat = note["category"]
                categories[cat] = categories.get(cat, 0) + 1
            
            text += "*üìù –ó–∞–º–µ—Ç–∫–∏:*\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(notes)}\n"
            text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(categories.keys())}\n\n"
        
        if not habits and not tasks and not notes:
            text += "*üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç*\n\n"
            text += "–ù–∞—á–Ω–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏, –∑–∞–¥–∞—á–∏ –∏ –∑–∞–º–µ—Ç–∫–∏!"
        else:
            quote = random.choice(self.motivational_quotes)
            text += f"üí´ *{quote}*"
        
        keyboard = [[InlineKeyboardButton("üìä –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É", callback_data="dashboard")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    async def _show_quick_add_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("üéØ –ü—Ä–∏–≤—ã—á–∫–∞", callback_data="quick_add_habit")],
            [InlineKeyboardButton("‚úÖ –ó–∞–¥–∞—á–∞", callback_data="quick_add_task")],
            [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∞", callback_data="quick_note")],
            [InlineKeyboardButton("üìä –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É", callback_data="dashboard")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üöÄ *–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _show_tasks(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        user_id = query.from_user.id
        tasks = self.storage.get_user_tasks(user_id, completed=False)
        
        if not tasks:
            text = "‚úÖ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á*\n\n–î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /add_task"
        else:
            text = "‚úÖ *–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n"
            for i, (task_id, task) in enumerate(tasks[:5], 1):
                priority_icon = "üî¥" if task["priority"] == "high" else "üü°" if task["priority"] == "medium" else "üü¢"
                due_text = f" (–¥–æ {task['due_date']})" if task["due_date"] else ""
                text += f"{i}. {priority_icon} {task['title']}{due_text}\n"
                if task["description"]:
                    text += f"   üìù {task['description']}\n"
        
        keyboard = [[InlineKeyboardButton("üìä –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É", callback_data="dashboard")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

    def _create_progress_bar(self, percentage, length=10):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
        filled = int(percentage / 100 * length)
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    def run(self):
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found!")
            return
        
        application = Application.builder().token(self.token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("dashboard", self.dashboard))
        application.add_handler(CommandHandler("add_habit", self.add_habit))
        application.add_handler(CommandHandler("add_task", self.add_task))
        application.add_handler(CommandHandler("add_note", self.add_note))
        application.add_handler(CommandHandler("stats", self.stats))
        application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_handler))
        
        logger.info("üöÄ Starting Maximoy Bot...")
        application.run_polling()

if __name__ == "__main__":
    bot = MaximoyBot()
    bot.run()
